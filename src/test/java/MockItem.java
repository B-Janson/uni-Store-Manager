package test.java;

import main.java.exceptions.StockException;
import main.java.stock.ColdItem;
import main.java.stock.Item;

/**
 * Static implementation to use pre-made items for tests
 * @author Brandon Janson
 */
public class MockItem {
	
	/**
	 * static rice item used for testing
	 */
	public static MockItem ITEM_RICE = new MockItem(MockItemType.RICE);
	/**
	 * static mushroom item used for testing
	 */
	public static MockItem ITEM_MUSHROOM = new MockItem(MockItemType.MUSHROOM);

	/**
	 * enum used to determine the values used for the mock items
	 * this is based on the given csv file item_properties
	 * @author Brandon Janson
	 */
	public enum MockItemType {
		RICE, MUSHROOM
	};
	
	private Item item;

	/**
	 * Constructor for making mock items for testing purposes
	 * 
	 * @param type
	 *            type of item to return
	 */
	public MockItem(MockItemType type) {
		switch (type) {
		case RICE:
			item = new Item("rice", 2, 3, 225, 300);
			break;
		case MUSHROOM:
			item = new ColdItem("mushrooms", 2, 4, 200, 325, 10);
			break;
		}
	}
	
	/**
	 * returns item generated by this mock item wrapper
	 * 
	 * @return item as specified in constructor
	 */
	public Item getItem() {
		return item;
	}
	
	/**
	 * method used to set the chosen item's amount to be its reorder amount
	 * used for simulating store orders
	 */
	public void reorder() {
		try {
			item.setCurrentAmount(item.getReorderAmount());
		} catch (StockException e) {
			e.printStackTrace();
		}
	}

}
